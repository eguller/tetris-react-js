{"version":3,"sources":["components/Game.module.css","components/Next.module.css","tetris/Colors.js","components/Cell.js","helpers/Helpers.js","components/Next.js","components/Score.js","components/Level.js","tetris/Tetromino.js","tetris/Piece.js","components/Game.js","tetris/State.js","index.js","tetris/Tetris.js","components/Cell.module.css"],"names":["module","exports","Colors","RED","BLUE","YELLOW","GREEN","Cell","props","useState","tetromino","setTetromino","useEffect","className","styles","tetromino2Class","clazz","empty","isFilled","color","blue","red","green","yellow","createMatrix","state","map","tetraminos","rowIndex","cols","tetramino","colIndex","row","createTetrominoRow","Next","next","setNext","tetrominos","matrix","class","Score","score","setScore","Level","level","setLevel","TetrominoStates","Tetromino","_state","isEmpty","isShadow","Piece","x","y","rand","Math","floor","random","Object","keys","length","randomColor","_x","_y","_color","width","height","matrixCoordinates","coordinates","i","j","push","rotate","matrixState","newState","nextPieceState","leftMost","min","coordinate","rightMost","max","newX","newY","abs","move","moveLeft","moveRight","moveDown","gameState","piece","every","isOnSamePosition","toTetrominos","moveInitCenter","matrixWidth","upMostPoint","randomPiece","o","z","s","l","m","pieces","emtpyPiece","Game","resumePauseButton","tetris","setState","onStateChange","document","title","isStarted","isRunning","onClick","pause","btn","btnPause","resume","btnNew","visibleMatrix","nextPiece","visibleNextPiece","gameOver","isGameOver","content","header","controls","controlsNext","controlsScore","controlsLevel","controlsButtons","start","controlsInfo","createState","_height","_width","paused","started","_level","_score","_nextPiece","_currentPiece","totalNumberOfClearedRows","onLevelChangeAction","initMatrix","_matrix","_visibleMatrix","sendNextPiece","calculateScore","numberOfClearedRows","pow","createVisibleMatrix","slice","forEach","overlaps","some","setGameOver","mergePieceIntoMatrix","action","nextPosition","clearRows","cell","splice","emtyRow","unshift","notifyLevelChangeListener","isPaused","moveCurrentPieceDown","newPosition","rotateCurrentPiece","onLevelChange","timer","stateChangeListeners","startTimer","calculateSpeedForCurrentLevel","delay","clearInterval","setInterval","tick","stopTimer","notifyOnStateChangeListeners","fn","createTetris","addEventListener","event","keyName","key","ReactDOM","render","StrictMode","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,sBAAsB,OAAS,qBAAqB,OAAS,qBAAqB,SAAW,uBAAuB,aAAe,2BAA2B,cAAgB,4BAA4B,cAAgB,4BAA4B,gBAAkB,8BAA8B,aAAe,2BAA2B,IAAM,kBAAkB,OAAS,qBAAqB,SAAW,uBAAuB,SAAW,yB,mBCA/cD,EAAOC,QAAU,CAAC,OAAS,qBAAqB,IAAM,oB,gICDhDC,EAAS,CACXC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,GASIJ,I,uBCEAK,EAZK,SAACC,GAAW,IAAD,EACOC,mBAASD,EAAME,WADtB,mBACpBA,EADoB,KACTC,EADS,KAO3B,OAJAC,qBAAU,WACND,EAAaH,EAAME,aACpB,CAACF,EAAME,YAGN,qBAAKG,UAAS,UAAKC,IAAOJ,UAAZ,YAAyBK,EAAgBL,EAAWI,SCTpEC,EAAkB,SAACL,EAAWI,GAChC,IAAIE,EAAQF,EAAOG,MACnB,OAAgB,MAAbP,EACQM,EACDN,EAAUQ,WACbhB,EAAOE,OAASM,EAAUS,MAClBL,EAAOM,KACRlB,EAAOC,MAAQO,EAAUS,MACxBL,EAAOO,IACRnB,EAAOI,QAAUI,EAAUS,MAC1BL,EAAOQ,MACRpB,EAAOG,SAAWK,EAAUS,MAC3BL,EAAOS,OAEPT,EAAOG,MAGXH,EAAOG,OAYhBO,EAAe,SAACC,EAAOX,GACzB,OAAY,MAATW,EACQ,KAEIA,EAAMC,KAAK,SAACC,EAAaC,GACpC,OAbmB,SAACD,EAAYC,EAAUd,GAC9C,IAAMe,EAAOF,EAAWD,KAAK,SAACI,EAAWC,GAAZ,OACzB,cAAC,EAAD,CAAMrB,UAAWoB,GAAjB,UAAoCF,EAApC,YAAgDG,OAGpD,OADqB,qBAAKlB,UAAWC,EAAOkB,IAAvB,SAA4CH,GAAXD,GAS3CK,CAAmBN,EAAYC,EAAUH,OCVzCS,EAtBK,SAAC1B,GAAW,IAAD,EACHC,mBAASD,EAAM2B,MADZ,mBACpBA,EADoB,KACdC,EADc,KAG3BxB,qBAAU,WACNwB,EAAQ5B,EAAM2B,QACf,CAAC3B,EAAM2B,OAEV,IAAME,EAAU,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAME,aACnBC,EAASD,EAAab,EAAaa,GAAc,GAEvD,OACI,gCACI,qBAAKE,MAAM,QAAX,SACI,0CAEL,qBAAK1B,UAAWC,IAAOwB,OAAvB,SACKA,QCHDE,EAfM,SAAChC,GAAW,IAAD,EACFC,mBAASD,EAAMiC,OADb,mBACrBA,EADqB,KACdC,EADc,KAO5B,OAJA9B,qBAAU,WACN8B,EAASlC,EAAMiC,SAChB,CAACjC,EAAMiC,QAGN,gCACI,sBAAMF,MAAM,QAAZ,mBACA,mBAAGA,MAAM,WAAT,SAAqBE,QCIlBE,EAfM,SAACnC,GAAW,IAAD,EACFC,mBAASD,EAAMoC,OADb,mBACrBA,EADqB,KACdC,EADc,KAO5B,OAJAjC,qBAAU,WACNiC,EAASrC,EAAMoC,SAChB,CAACpC,EAAMoC,QAGN,gCACI,sBAAML,MAAM,QAAZ,mBACA,mBAAGA,MAAM,WAAT,SAAqBK,Q,uBCX3BE,EACK,EADLA,EAEM,EAFNA,EAGM,EAENC,EAAY,SAACtB,EAAON,GAEtB,IAAI6B,EAAkB,MAATvB,EAAgBqB,EAAwBrB,EAGrD,MAAO,CACHwB,QADG,WAEC,OAAOD,IAAWF,GAAyBE,IAAWF,GAE1DI,SAJG,WAKC,OAAOF,IAAWF,GAEtB5B,SAPG,WAQC,OAAO8B,IAAWF,GAEtB3B,MAZSA,EAaTM,MAAOuB,IClBTG,EAAQ,SAARA,EAAS,GAAkD,IAAD,IAAhDC,SAAgD,MAA5C,EAA4C,MAAzCC,SAAyC,MAArC,EAAqC,MAAlClC,aAAkC,MPI5C,WAChB,IAAMmC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,KAAKzD,GAAQ0D,QAE5D,OADuB1D,EAAOwD,OAAOC,KAAKzD,GAAQoD,IONhBO,GAA0B,EAAXpC,EAAW,EAAXA,MAE7CqC,EAAKV,EACLW,EAAKV,EACLW,EAAS7C,EACT6B,EAASvB,EACTwC,EAAQjB,EAAO,GAAGY,OAClBM,EAASlB,EAAOY,OAgEdO,EAAoB,WAEtB,IADA,IAAMC,EAAc,GACZC,EAAI,EAAGA,EAAIH,EAAQG,IACvB,IAAI,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACtB,GA1EG,IA0EAtB,EAAOqB,GAAGC,GAAc,CACvB,IAAMlB,EAAIkB,EAAIR,EACRT,EAAIgB,EAAIN,EAGd,GAAGX,EAAI,GAAKC,EAAI,EACZ,SAEJe,EAAYG,KAAK,CAACnB,EAAGA,EAAGC,EAAGA,IAIvC,OAAOe,GA4CX,MAAO,CACHI,OA5HW,SAACC,GAEZ,IADA,IAAIC,EAAW,GACPL,EAAI,EAAGA,EAAIJ,EAAOI,IAAK,CAC3BK,EAASH,KAAK,IACd,IAAI,IAAID,EAAI,EAAGA,EAAIJ,EAAQI,IACvBI,EAASL,GAAGE,KAAKvB,EAAOkB,EAASI,EAAI,GAAGD,IAIhD,IAAMM,EAAiBxB,EAAM,CAACC,EAAGU,EAAIT,EAAGU,EAAI5C,MAAO6C,EAAQvC,MAAOiD,IAC5DE,EAAWrB,KAAKsB,IAAL,MAAAtB,KAAI,YAAQoB,EAAeR,oBAAoBzC,KAAI,SAAAoD,GAAU,OAAIA,EAAW1B,OACzF2B,EAAYxB,KAAKyB,IAAL,MAAAzB,KAAI,YAAQoB,EAAeR,oBAAoBzC,KAAI,SAAAoD,GAAU,OAAIA,EAAW1B,OAExF6B,EAAOnB,EACPoB,EAAOnB,EAUX,OARGa,EAAW,IACVK,EAAQnB,EAAKP,KAAK4B,IAAIP,IAGvBG,GAAaN,EAAYR,MAAQ,IAChCgB,EAAOnB,GAAMiB,GAAaN,EAAYR,MAAQ,KAG3Cd,EAAM,CAACC,EAAG6B,EAAM5B,EAAG6B,EAAM/D,MAAO6C,EAAQvC,MAAOiD,KAqGtDU,KAjGS,SAAChC,EAAGC,GACb,OAAOF,EAAMC,IAiGbiC,SAvFa,WACb,IAAIJ,EAAOnB,EAAK,EACZoB,EAAOnB,EAQX,OANiBR,KAAKsB,IAAL,MAAAtB,KAAI,YAAQY,IAAoBzC,KAAI,SAAAoD,GAAU,OAAIA,EAAW1B,QAE/D,IACX6B,EAAOnB,GAGJX,EAAM,CAACC,EAAG6B,EAAM5B,EAAG6B,EAAM/D,MAAO6C,EAAQvC,MAAMuB,KA8ErDsC,UA3Ec,SAACb,GACf,IAAIQ,EAAOnB,EAAK,EACZoB,EAAOnB,EAMX,OAJgBR,KAAKyB,IAAL,MAAAzB,KAAI,YAAQY,IAAoBzC,KAAI,SAAAoD,GAAU,OAAIA,EAAW1B,QAC7DqB,EAAYR,MAAQ,IAChCgB,EAAOnB,GAEJX,EAAM,CAACC,EAAG6B,EAAM5B,EAAG6B,EAAM/D,MAAO6C,EAAQvC,MAAMuB,KAoErDuC,SA9Ca,SAACC,GACd,IACMC,EAAQtC,EAAM,CAACC,EAAGU,EAAIT,EADfU,EAAK,EACmB5C,QAAOM,UAO5C,OAN0BgE,EAAMtB,oBACMuB,OAAM,SAAAZ,GAExC,OADiBA,EAAWzB,EAAImC,EAAUtB,SAAYsB,EAAUtE,SAAS4D,MAKlEW,EAEYtC,EAAM,CAACC,EAAGU,EAAIT,EAAGU,EAAI5C,QAAOM,WAmCnD2B,EAAGU,EACHT,EAAGU,EACH4B,iBAhCqB,SAACF,GACtB,OAAO3B,IAAO2B,EAAMrC,GAAKW,IAAO0B,EAAMpC,GAgCtCc,oBACAhD,MAAO6C,EACP3B,WAfe,WACf,OAjBiB,SAACZ,EAAON,GAEzB,IADA,IAAMkB,EAAa,GACXgC,EAAI,EAAGA,EAAI5C,EAAMmC,OAAQS,IAAK,CAElC,IADA,IAAMrC,EAAM,GACJsC,EAAI,EAAGA,EAAI7C,EAAM,GAAGmC,OAAQU,IAAK,CACrC,IAAI5D,EAAYqC,IAnHb,IAoHAtB,EAAM4C,GAAGC,KACV5D,EAAYqC,EAAUD,EAAwB3B,IAEhDa,EAAIuC,KAAK7D,GAEb2B,EAAWkC,KAAKvC,GAEpB,OAAOK,EAIAuD,CAAa5C,EAAQgB,IAe5B6B,eAvGmB,SAACC,GACpB,IAAM1C,EAAIG,KAAKC,OAAOsC,EAAc7B,GAAS,GACvC8B,EAAcxC,KAAKsB,IAAL,MAAAtB,KAAI,YAAQY,IAAoBzC,KAAI,SAAAoD,GAAU,OAAIA,EAAWzB,OAEjF,OAAOF,EAAM,CAACC,EAAGA,EAAGC,EADV,EAAI0C,EACY5E,MAAO6C,EAAQvC,MAAOuB,OAiNlDgD,EAAc,WAChB,IAAM3B,EAnGQlB,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,MAuGLwE,EAzFQ9C,EAAM,CAAC1B,MANF,CACf,CAAC,EAAE,GACH,CAAC,EAAE,MA8FDyE,EA/EQ/C,EAAM,CAAC1B,MANF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MAmFH0E,EArEQhD,EAAM,CAAC1B,MANF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MAyEH6C,EA1DQnB,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MA+DH2E,EA/CQjD,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MAoDH4E,EApCQlD,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MA4CH6E,GA5BQnD,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,MAgCM,CACX4C,EACA4B,EACAC,EACAC,EACA7B,EACA8B,EACAC,IAKEL,EAAcM,EADR/C,KAAKC,MAAMD,KAAKE,SAAW6C,EAAO1C,SAE9C,OAAOoC,GAGLO,EAAa,WACf,OAhCcpD,EAAM,CAAC1B,MAPF,CACf,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,OCjKE+E,EA/EK,SAAChG,GACjB,IAaIiG,EAbEC,EAASlG,EAAMkG,OADM,EAEDjG,mBAASD,EAAMkG,OAAOjF,OAFrB,mBAEpBA,EAFoB,KAEbkF,EAFa,KAIrBC,EAAgB,SAAC5D,GACnB2D,EAAS3D,IAGbpC,qBAAU,WACN8F,EAAOE,cAAcA,GACrBC,SAASC,MAAO,iBACjB,CAACJ,IAIAjF,EAAMsF,cAEFN,EADAhF,EAAMuF,YAEF,wBAAQC,QAASP,EAAOQ,MAAOrG,UAAS,UAAKC,IAAOqG,IAAZ,YAAmBrG,IAAOsG,UAAlE,mBAGA,wBAAQH,QAASP,EAAOW,OAAQxG,UAAS,UAAKC,IAAOqG,IAAZ,YAAmBrG,IAAOwG,QAAnE,qBAKZ,IAAMhF,EAASd,EAAaC,EAAM8F,gBAAiBzG,KAE7C0G,EAAY/F,EAAM+F,YAClBC,EAAmBD,GAAwBjB,IAE3CmB,EAAWjG,EAAMkG,aACnB,qBAAK9G,UAAWC,IAAO4G,SAAvB,SACI,4CAGJ,GAEJ,OACI,sBAAK7G,UAAWC,IAAO8G,QAAvB,UACI,qBAAK/G,UAAWC,IAAO+G,OAAvB,SAA+B,kDAE/B,sBAAKhH,UAAWC,IAAOwB,OAAvB,UACKA,EACAoF,KAEL,sBAAK7G,UAAWC,IAAOgH,SAAvB,UACI,qBAAKjH,UAAWC,IAAOiH,aAAvB,SACI,cAAC,EAAD,CAAM5F,KAAMsF,MAEhB,qBAAK5G,UAAWC,IAAOkH,cAAvB,SACI,cAAC,EAAD,CAAOvF,MAAOhB,EAAMgB,YAExB,qBAAK5B,UAAWC,IAAOmH,cAAvB,SACI,cAAC,EAAD,CAAOrF,MAAOnB,EAAMmB,YAExB,sBAAK/B,UAAWC,IAAOoH,gBAAvB,UACI,qBAAKrH,UAAWC,IAAOkB,IAAvB,SACI,wBAAQiF,QAASP,EAAOyB,MAAOtH,UAAS,UAAKC,IAAOqG,IAAZ,YAAmBrG,IAAOwG,QAAlE,wBAEJ,qBAAKzG,UAAWC,IAAOkB,IAAvB,SACKyE,OAGT,qBAAK5F,UAAWC,IAAOsH,aAAvB,SACI,oBAAG7F,MAAM,WAAT,uCAC8B,uBAD9B,oBAEqB,uBAFrB,oBAGqB,uBAHrB,sBAIuB,uBAJvB,yBAK0B,mC,QCzExC8F,EAAc,SAACnE,EAAQD,GACzB,IAAIqE,EAAUpE,EACVqE,EAAStE,EACTuE,GAAU,EACVC,GAAU,EACVf,GAAW,EACXgB,EAAU,EACVC,EAAS,EACTC,EAAa,KACbC,EAAgB,KAChBC,EAA2B,EAC3BC,EAAsB,KAkBpBC,EAAa,SAAC9E,EAAQD,GAExB,IADA,IAAIgF,EAAU,GACL5E,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7B4E,EAAQ5E,GAAK,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOK,IACvB2E,EAAQ5E,GAAGC,GAAKvB,IAGxB,OAAOkG,GAGP3G,EAAS0G,EAAW9E,EAAQD,GAC5BiF,EAAc,YAAO5G,GAsBnB6G,EAAgB,WACD,MAAdP,IACCA,EAAa5C,KAEjB6C,EAAgBD,EAChBA,EAAa5C,IACb6C,EAAiBA,EAAchD,eAAe5B,IAG5C/C,EAAW,SAAC4D,GACd,OAAOxC,EAAOwC,EAAWzB,GAAGyB,EAAW1B,GAAGlC,YAoCxCkI,EAAiB,SAACT,EAAQU,EAAqBX,GACjD,OAAOC,EAASpF,KAAK+F,IAAID,EAAqB,GAAKX,GAGjDa,EAAsB,SAACjH,GACzB,IAAMiF,EAAgBjF,EAAOZ,KAAI,SAAAM,GAAG,OAAIA,EAAIwH,WAO5C,OANoB,MAAjBX,GACCA,EAAc1E,oBAAoBsF,SAAQ,SAAA3E,GACtC,IAAMpE,EAAYqC,EAAUD,EAAwB+F,EAAc1H,OAClEoG,EAAczC,EAAWzB,GAAGyB,EAAW1B,GAAK1C,KAG7C6G,GAGLmC,EAAW,SAACjE,GAKd,OAJgBA,EAAMtB,oBAAoBwF,MAAK,SAAA7E,GAC3C,OAAOxC,EAAOwC,EAAWzB,GAAGyB,EAAW1B,GAAGlC,eAM5C0I,EAAc,WAClBnB,GAAU,EACVD,GAAS,EACTd,GAAW,GAGPmC,EAAuB,SAACpE,GAC1BA,EAAMtB,oBAAoBsF,SAAS,SAAA3E,GAC/BxC,EAAOwC,EAAWzB,GAAGyB,EAAW1B,GAAKL,EAAUD,EAAwB2C,EAAMtE,WAgB/EiE,EAAO,SAAC0E,GACV,GAAoB,MAAjBjB,EAAH,CAGA,IAAIkB,EAAeD,IACA,MAAhBC,GAAyBL,EAASK,KACjClB,EAAgBkB,EAChBb,EAAiBK,EAAoBjH,MAIvC0H,EAAY,WAEd,IADA,IAAIX,EAAsB,EAClBhF,EAAIH,EAAS,EAAGG,GAAK,GAAK,CAE9B,GADiB/B,EAAO+B,GAAGqB,OAAM,SAAAuE,GAAI,OAAIA,EAAKhH,aAE1C,MAIJ,GADkBX,EAAO+B,GAAGqB,OAAM,SAAAuE,GAAI,OAAIA,EAAK/I,cAClC,CACToB,EAAO4H,OAAO7F,EAAG,GAEjB,IADA,IAAM8F,EAAU,GACR7F,EAAI,EAAGA,EAAIL,EAAOK,IACtB6F,EAAQ5F,KAAKxB,KAEjBT,EAAO8H,QAAQD,GACfd,SAEAhF,IAGR,OAAOgF,GAuBLgB,EAA4B,SAACzH,GAC5BmG,GACCA,EAAoBnG,IAI5B,MAAO,CACHoE,UA7Mc,WACd,OAAOyB,IAAYD,GA6MnBzB,UA1Mc,WACd,OAAO0B,GA0MP6B,SAnMa,WACb,OAAO9B,GAmMPL,MAjLU,WACVK,GAAS,EACTC,GAAU,EACVf,GAAW,EACXgB,EAAS,EACTC,EAAS,EACTrG,EAAS0G,EAAWV,EAASC,GAC7BY,IACAD,EAAiBK,EAAoBjH,IA0KrC4E,MAvKU,WACVsB,GAAS,GAuKTnB,OApKW,WACXmB,GAAS,GAoKT5F,MAzBU,WACV,OAAO8F,GAyBPjG,MA9BU,WACV,OAAOkG,GA8BPzH,WACAyG,WA9Me,WACf,OAAOD,GA8MP6C,qBAhJyB,WACzB,GAAoB,MAAjB1B,EAIH,GAAGa,EAASb,GACRe,QADJ,CAIA,IAAMY,EAAc3B,EAActD,SAAS,CAACrE,WAAUgD,WAGnDsG,EAAY7E,iBAAiBkD,IAC5BgB,EAAqBW,GACrBrB,KAEAN,EAAgB2B,EAEpB,IAAMnB,EAAsBW,KAC5BlB,GAA0BO,GAzGF,KAgFpBX,IACAI,EAA2B,EAC3BuB,EAA0B3B,IAyB9BC,EAASS,EAAeT,EAAQU,EAAqBX,GACrDQ,EAAiBK,EAAoBjH,KA2HrCiF,cAtCkB,WACpB,OAAO2B,GAsCLuB,mBAtFuB,WACvBrF,GAAK,kBAAMyD,EAAcrE,OAAO,CAACP,MAAOsE,QAsFxClD,SAnFa,WACbD,GAAK,kBAAMyD,EAAcxD,eAmFzBC,UAhFc,WACdF,GAAK,kBAAMyD,EAAcvD,UAAU,CAACrB,MAAOsE,QAgF3Cf,UA9Bc,WACd,OAAOoB,GA8BP8B,cA3BkB,SAACZ,GACnBf,EAAsBe,KC/MxBpD,ECHe,WAA+C,IAAD,yDAA3B,CAACxC,OAAQ,GAAID,MAAM,IAApCC,EAA4C,EAA5CA,OAAQD,EAAoC,EAApCA,MACrBqE,EAAUpE,EACVqE,EAAStE,EACTxC,EAAQ4G,EAAYC,EAASC,GAC/BoC,EAAQ,KACNC,EAAuB,GAE7BnJ,EAAMiJ,eAAc,SAAC9H,GAAD,OAAWiI,EAAWF,EAAOG,EAA8BlI,OAE/E,IAAMiI,EAAa,SAACF,EAAOI,GAMvB,OALa,MAATJ,GACAK,cAAcL,GAGDM,YAAYC,EAAMH,IAIjCI,EAAY,SAACR,GACF,MAATA,GACAK,cAAcL,IAIhBG,EAAgC,SAAClI,GACnC,OAAOW,KAAKC,MAAM,IAAOD,KAAK+F,IAAI,GAAK1G,EAAQ,KAmB7CsI,EAAO,WACJzJ,EAAMuF,cAIXvF,EAAM8I,uBACH9I,EAAMkG,cACLwD,EAAUR,GAEdS,MAGEA,EAA+B,WACjCR,EAAqBnB,SAAQ,SAAA4B,GAAE,OAAIA,EAAG,eAAI5J,QAGxC4F,EAAS,WACX5F,EAAM4F,SACN+D,IACAT,EAAQE,EAAWF,EAAOG,EAA8BrJ,EAAMmB,WAI5DuF,EAAQ,WACN1G,EAAMsF,cAGVtF,EAAM0G,QACNiD,IACAT,EAAQE,EAAWF,EAAOG,EAA8BrJ,EAAMmB,YAG5DsE,EAAQ,WACNzF,EAAM6I,aAGG,MAATK,GACAK,cAAcL,GAElBlJ,EAAMyF,QACNiE,EAAUR,GACVS,MAGEd,EAAW,WACb,OAAO7I,EAAM6I,YAGXjF,EAAW,WACb5D,EAAM4D,WACN+F,KAGE9F,EAAY,WACd7D,EAAM6D,YACN8F,KAGEX,EAAqB,WACvBhJ,EAAMgJ,qBACNW,KAKJ,MAAO,CACHxE,cADG,SACWyE,GACVT,EAAqBrG,KAAK8G,IAG9B1D,WALG,WAMC,OAAOlG,EAAMiG,UAGjBV,UATG,WAUC,OAAOvF,EAAMuF,aAGjBD,UAbG,WAcC,OAAOtF,EAAMsF,aAEjBtF,QACAgJ,qBACApF,WACAC,YACA6C,QACAjB,QACAoD,WACAjD,SACA6D,OACAhH,OAAQoE,EACRrE,MAAOsE,GDpIA+C,GACf5E,EAAOyB,QACPtB,SAAS0E,iBAAiB,WAAW,SAACC,GAClC,IAAMC,EAAUD,EAAME,IAClBhF,EAAOM,YACS,YAAZyE,EACA/E,EAAO+D,qBACY,cAAZgB,EACP/E,EAAOwE,OAEU,cAAZO,EACL/E,EAAOrB,WACY,eAAZoG,EACP/E,EAAOpB,YACY,MAAZmG,GACP/E,EAAOQ,QAGI,MAAZuE,IACK/E,EAAO4D,WACP5D,EAAOW,SAEPX,EAAOyB,YAKvBwD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,CAAMnF,OAAQA,MAElBG,SAASiF,eAAe,U,kBEpC5B9L,EAAOC,QAAU,CAAC,UAAY,wBAAwB,MAAQ,oBAAoB,IAAM,kBAAkB,MAAQ,oBAAoB,KAAO,mBAAmB,OAAS,wB","file":"static/js/main.839d4ce5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Game_content__2Np0v\",\"header\":\"Game_header__3blVf\",\"matrix\":\"Game_matrix__1FwpS\",\"controls\":\"Game_controls__sGFqi\",\"controlsNext\":\"Game_controlsNext__sQewC\",\"controlsScore\":\"Game_controlsScore__11eOJ\",\"controlsLevel\":\"Game_controlsLevel__2nv5M\",\"controlsButtons\":\"Game_controlsButtons__10Co-\",\"controlsInfo\":\"Game_controlsInfo__2H7J3\",\"btn\":\"Game_btn__3vWIp\",\"btnNew\":\"Game_btnNew__3pc04\",\"btnPause\":\"Game_btnPause__2USDv\",\"gameOver\":\"Game_gameOver__3lpfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"matrix\":\"Next_matrix__1dz8V\",\"row\":\"Next_row__2NyQl\"};","const Colors = {\n    RED: 1,\n    BLUE: 2,\n    YELLOW: 3,\n    GREEN: 4,\n};\n\nconst randomColor = () => {\n    const rand = Math.floor(Math.random() * Object.keys(Colors).length);\n    const randColorValue = Colors[Object.keys(Colors)[rand]];\n    return randColorValue;\n}\n\nexport default Colors;\nexport {randomColor}\n","import styles from \"./Cell.module.css\";\nimport React, { useEffect, useState } from 'react';\nimport {tetromino2Class} from \"../helpers/Helpers\";\nexport const Cell = (props) => {\n    const [tetromino, setTetromino] = useState(props.tetromino);\n\n    useEffect(() => {\n        setTetromino(props.tetromino);\n    }, [props.tetromino])\n\n    return (\n        <div className={`${styles.tetromino} ${tetromino2Class(tetromino, styles)}`} />\n    )\n}\n\nexport default Cell;\n","import Colors from \"../tetris/Colors\";\nimport Cell from \"../components/Cell\";\nconst tetromino2Class = (tetromino, styles) => {\n    let clazz = styles.empty;\n    if(tetromino == null){\n        return clazz;\n    } else if(tetromino.isFilled()){\n        if(Colors.BLUE === tetromino.color){\n            return styles.blue;\n        } else if(Colors.RED === tetromino.color){\n            return styles.red;\n        } else if(Colors.GREEN === tetromino.color){\n            return styles.green;\n        } else if(Colors.YELLOW === tetromino.color){\n            return styles.yellow;\n        } else {\n            return styles.empty;\n        }\n    } else {\n        return styles.empty;\n    }\n};\n\nconst createTetrominoRow = (tetraminos, rowIndex, styles) => {\n    const cols = tetraminos.map( (tetramino, colIndex) =>\n        <Cell tetromino={tetramino} key={`${rowIndex}-${colIndex}`}/>\n    );\n    const rowComponent = <div className={styles.row} key={rowIndex}>{cols}</div>;\n    return rowComponent;\n};\n\nconst createMatrix = (state, styles) => {\n    if(state == null){\n        return null;\n    }\n    const matrix = state.map( (tetraminos , rowIndex) => {\n        return createTetrominoRow(tetraminos, rowIndex, state, styles);\n    });\n    return matrix;\n}\n\nexport {tetromino2Class, createMatrix}\n\n","import {useEffect, useState} from \"react\";\nimport styles from \"./Next.module.css\";\nimport {createMatrix} from \"../helpers/Helpers\";\n\nexport const Next = (props) => {\n    const [next, setNext] = useState(props.next);\n\n    useEffect(() => {\n        setNext(props.next);\n    }, [props.next])\n\n    const tetrominos = next?.tetrominos();\n    const matrix = tetrominos ? createMatrix(tetrominos) : \"\";\n\n    return (\n        <div>\n            <div class=\"title\">\n                <span>Next</span>\n            </div>\n           <div className={styles.matrix}>\n               {matrix}\n           </div>\n        </div>\n    )\n}\n\nexport default Next;\n\n","import {useEffect, useState} from \"react\";\n\nexport const Score = (props) => {\n    const [score, setScore] = useState(props.score);\n\n    useEffect(() => {\n        setScore(props.score);\n    }, [props.score])\n\n    return (\n        <div>\n            <span class=\"title\">Score</span>\n            <p class=\"gameText\">{score}</p>\n        </div>\n    )\n}\n\nexport default Score;\n","import {useEffect, useState} from \"react\";\nexport const Level = (props) => {\n    const [level, setLevel] = useState(props.level);\n\n    useEffect(() => {\n        setLevel(props.level);\n    }, [props.level])\n\n    return (\n        <div>\n            <span class=\"title\">Level</span>\n            <p class=\"gameText\">{level}</p>\n        </div>\n    )\n}\n\nexport default Level;\n","const TetrominoStates = {\n    EMPTY: 0,\n    FILLED: 1,\n    SHADOW: 2\n};\nconst Tetromino = (state, color) => {\n\n    let _state = state == null ? TetrominoStates.EMPTY : state;\n    let _color = color;\n\n    return {\n        isEmpty() {\n            return _state === TetrominoStates.EMPTY || _state === TetrominoStates.SHADOW;\n        },\n        isShadow() {\n            return _state === TetrominoStates.SHADOW;\n        },\n        isFilled() {\n            return _state === TetrominoStates.FILLED;\n        },\n        color: _color,\n        state: _state\n\n    }\n}\n\nexport {Tetromino, TetrominoStates};\n","import {Tetromino, TetrominoStates} from \"./Tetromino\";\nimport {randomColor} from \"./Colors\";\n\nconst Piece = ({x = 0, y = 0, color = randomColor(), state}) => {\n    const FILLED = 1;\n    let _x = x;\n    let _y = y;\n    let _color = color;\n    let _state = state;\n    let width = _state[0].length;\n    let height = _state.length;\n    const rotate = (matrixState) => {\n        let newState = [];\n        for(let i = 0; i < width; i ++){\n            newState.push([]);\n            for(let j = 0; j < height; j ++){\n                newState[i].push(_state[height - j - 1][i]);\n            }\n        }\n\n        const nextPieceState = Piece({x: _x, y: _y, color: _color, state: newState});\n        const leftMost = Math.min(...nextPieceState.matrixCoordinates().map(coordinate => coordinate.x));\n        let rightMost = Math.max(...nextPieceState.matrixCoordinates().map(coordinate => coordinate.x));\n\n        let newX = _x;\n        let newY = _y;\n\n        if(leftMost < 0){\n            newX  = _x + Math.abs(leftMost);\n        }\n\n        if(rightMost >= matrixState.width - 1){\n            newX = _x - (rightMost - (matrixState.width - 1));\n        }\n\n        return Piece({x: newX, y: newY, color: _color, state: newState});\n\n    };\n\n    const move = (x, y) => {\n        return Piece(x, y, _color, _state);\n    };\n\n    const moveInitCenter = (matrixWidth) => {\n        const x = Math.floor((matrixWidth - width) / 2);\n        const upMostPoint = Math.min(...matrixCoordinates().map(coordinate => coordinate.y));\n        const y = 0 - upMostPoint;\n        return Piece({x: x, y: y, color: _color, state: _state})\n    }\n\n    const moveLeft = () => {\n        let newX = _x - 1;\n        let newY = _y;\n\n        const leftMost = Math.min(...matrixCoordinates().map(coordinate => coordinate.x));\n        //if piece out of matrix after rotation, auto align coordinates.\n        if(leftMost <= 0){\n            newX = _x;\n        }\n\n        return Piece({x: newX, y: newY, color: _color, state:_state});\n    };\n\n    const moveRight = (matrixState) => {\n        let newX = _x + 1;\n        let newY = _y;\n\n        let rightMost = Math.max(...matrixCoordinates().map(coordinate => coordinate.x));\n        if(rightMost >= matrixState.width - 1){\n            newX = _x;\n        }\n        return Piece({x: newX, y: newY, color: _color, state:_state});\n    };\n\n    const matrixCoordinates = () => {\n        const coordinates = [];\n        for(let i = 0; i < height; i ++){\n            for(let j = 0; j < width; j++){\n                if(_state[i][j] === FILLED){\n                    const x = j + _x;\n                    const y = i + _y;\n                    //if piece is rotated at initial position (especially for I piece),\n                    // some cells can go to out of matrix\n                    if(x < 0 || y < 0){\n                        continue;\n                    }\n                    coordinates.push({x: x, y: y});\n                }\n            }\n        }\n        return coordinates;\n    };\n\n    const moveDown = (gameState) => {\n        const newY = _y + 1;\n        const piece = Piece({x: _x, y: newY, color, state});\n        const matrixCoordinates = piece.matrixCoordinates();\n        const canMoveDown = matrixCoordinates.every(coordinate => {\n            const canMove = (coordinate.y < gameState.height) && !gameState.isFilled(coordinate);\n            return canMove;\n        });\n\n        if(canMoveDown){\n            return piece;\n        } else {\n            const samePiece  = Piece({x: _x, y: _y, color, state});\n            return samePiece;\n        }\n    };\n\n    const isOnSamePosition = (piece) =>{\n        return _x === piece.x && _y === piece.y;\n    };\n\n    const toTetrominos = (state, color) => {\n        const tetrominos = [];\n        for(let i = 0; i < state.length; i ++){\n            const row = [];\n            for(let j = 0; j < state[0].length; j ++){\n                let tetromino = Tetromino();\n                if(state[i][j] === FILLED){\n                  tetromino = Tetromino(TetrominoStates.FILLED, color);\n                }\n                row.push(tetromino);\n            }\n            tetrominos.push(row);\n        }\n        return tetrominos;\n    };\n\n    const tetrominos = () => {\n        return toTetrominos(_state, _color);\n    };\n\n    return {\n        rotate,\n        move,\n        moveLeft,\n        moveRight,\n        moveDown,\n        x: _x,\n        y: _y,\n        isOnSamePosition,\n        matrixCoordinates,\n        color: _color,\n        tetrominos,\n        moveInitCenter\n    };\n}\n\nconst I_Piece = () => {\n    let initalState =  [\n        [0,0,0,0],\n        [1,1,1,1],\n        [0,0,0,0],\n        [0,0,0,0],\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst O_Piece = () => {\n    let initalState =  [\n        [1,1],\n        [1,1],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst Z_Piece = () => {\n    let initalState =  [\n        [1,1,0],\n        [0,1,1],\n        [0,0,0]\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst S_Piece = () => {\n    let initalState =  [\n        [0,1,1],\n        [1,1,0],\n        [0,0,0]\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst J_Piece = () => {\n    let initalState =  [\n        [1,0,0],\n        [1,1,1],\n        [0,0,0],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst L_Piece = () => {\n    let initalState =  [\n        [0,0,1],\n        [1,1,1],\n        [0,0,0],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst M_Piece = () => {\n    let initalState =  [\n        [1,1,1],\n        [0,1,0],\n        [0,0,0],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst X_Piece = () => {\n    let initalState =  [\n        [1,0,1],\n        [0,1,0],\n        [1,0,1],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\n\nconst empty_Piece = () => {\n    let initalState =  [\n        [0,0,0],\n        [0,0,0],\n        [0,0,0],\n\n    ];\n\n    const piece = Piece({state: initalState});\n    return piece;\n}\n\nconst randomPiece = () => {\n    const i = I_Piece();\n    const o = O_Piece();\n    const z = Z_Piece();\n    const s = S_Piece();\n    const j = J_Piece();\n    const l = L_Piece();\n    const m = M_Piece();\n\n    //eslint-disable-next-line no-unused-vars\n    const x = X_Piece();\n    const pieces = [\n        i,\n        o,\n        z,\n        s,\n        j,\n        l,\n        m,\n        //x --> experimental X piece.\n    ];\n\n    const rnd = Math.floor(Math.random() * pieces.length);\n    const randomPiece = pieces[rnd];\n    return randomPiece;\n}\n\nconst emtpyPiece = () => {\n    return empty_Piece();\n}\n\nexport {randomPiece, emtpyPiece};","import Next from \"./Next.js\";\nimport Score from \"./Score.js\";\nimport Level from \"./Level.js\";\nimport {createMatrix} from \"../helpers/Helpers\";\nimport React, {useState, useEffect} from 'react';\nimport styles from \"./Game.module.css\";\nimport {emtpyPiece} from \"../tetris/Piece\";\n\nexport const Game = (props) => {\n    const tetris = props.tetris;\n    const [state, setState] = useState(props.tetris.state);\n\n    const onStateChange = (_state) => {\n        setState(_state);\n    };\n\n    useEffect(() => {\n        tetris.onStateChange(onStateChange);\n        document.title =\"React Tetris\";\n    }, [tetris]);\n\n\n    let resumePauseButton;\n    if (state.isStarted()) {\n        if (state.isRunning()) {\n            resumePauseButton =\n                <button onClick={tetris.pause} className={`${styles.btn} ${styles.btnPause}`}>Pause</button>\n        } else {\n            resumePauseButton =\n                <button onClick={tetris.resume} className={`${styles.btn} ${styles.btnNew}`}>Resume</button>\n        }\n    }\n\n\n    const matrix = createMatrix(state.visibleMatrix(), styles);\n\n    const nextPiece = state.nextPiece();\n    const visibleNextPiece = nextPiece ? nextPiece : emtpyPiece();\n\n    const gameOver = state.isGameOver() ?\n        <div className={styles.gameOver}>\n            <p>Game Over</p>\n        </div>\n        :\n        '';\n\n    return (\n        <div className={styles.content}>\n            <div className={styles.header}><span>React Tetris</span></div>\n\n            <div className={styles.matrix}>\n                {matrix}\n                {gameOver}\n            </div>\n            <div className={styles.controls}>\n                <div className={styles.controlsNext}>\n                    <Next next={visibleNextPiece}/>\n                </div>\n                <div className={styles.controlsScore}>\n                    <Score score={state.score()}/>\n                </div>\n                <div className={styles.controlsLevel}>\n                    <Level level={state.level()}></Level>\n                </div>\n                <div className={styles.controlsButtons}>\n                    <div className={styles.row}>\n                        <button onClick={tetris.start} className={`${styles.btn} ${styles.btnNew}`}>New Game</button>\n                    </div>\n                    <div className={styles.row}>\n                        {resumePauseButton}\n                    </div>\n                </div>\n                <div className={styles.controlsInfo}>\n                    <p class=\"infoText\">\n                        Start/Pause/Resume: Space <br/>\n                        Rotate: Arrow Up <br/>\n                        Left: Arrow Left <br/>\n                        Right: Arrow Right <br/>\n                        Soft Drop: Arrow Down <br/>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Game;\n\n","import {Tetromino, TetrominoStates} from \"./Tetromino\";\nimport {randomPiece} from \"./Piece\";\n\nconst MAX_ROW_CLEAR_PER_LEVEL = 10;\n\nconst createState = (height, width) => {\n    let _height = height;\n    let _width = width;\n    let paused =  false;\n    let started = false;\n    let gameOver = false;\n    let _level =  1;\n    let _score = 0;\n    let _nextPiece = null;\n    let _currentPiece = null;\n    let totalNumberOfClearedRows = 0;\n    let onLevelChangeAction = null;\n\n    const isRunning = () => {\n        return started && !paused;\n    };\n\n    const isStarted = () => {\n        return started;\n    };\n\n    const isGameOver = () => {\n        return gameOver;\n    };\n\n    const isPaused = () => {\n        return paused;\n    };\n\n    const initMatrix = (height, width) => {\n        let _matrix = [];\n        for (let i = 0; i < height; i++) {\n            _matrix[i] = [];\n            for (let j = 0; j < width; j++) {\n                _matrix[i][j] = Tetromino();\n            }\n        }\n        return _matrix;\n    };\n\n    let matrix = initMatrix(height, width);\n    let _visibleMatrix = [...matrix];\n\n\n    const start = () => {\n        paused = false;\n        started = true;\n        gameOver = false;\n        _level = 1;\n        _score = 0;\n        matrix = initMatrix(_height, _width);\n        sendNextPiece();\n        _visibleMatrix = createVisibleMatrix(matrix);\n    };\n\n    const pause = () => {\n        paused = true;\n    }\n\n    const resume = () => {\n        paused = false;\n    }\n\n    const sendNextPiece = () => {\n        if(_nextPiece == null){\n            _nextPiece = randomPiece();\n        }\n        _currentPiece = _nextPiece;\n        _nextPiece = randomPiece();\n        _currentPiece  = _currentPiece.moveInitCenter(width);\n    }\n\n    const isFilled = (coordinate) => {\n        return matrix[coordinate.y][coordinate.x].isFilled();\n    };\n\n    const increaseLevel = () => {\n        if (totalNumberOfClearedRows > MAX_ROW_CLEAR_PER_LEVEL) {\n            _level++;\n            totalNumberOfClearedRows = 0;\n            notifyLevelChangeListener(_level);\n        }\n    }\n\n    const moveCurrentPieceDown = () => {\n        if(_currentPiece == null){\n            return;\n        }\n\n        if(overlaps(_currentPiece)){\n            setGameOver();\n            return;\n        }\n        const newPosition = _currentPiece.moveDown({isFilled, height});\n        //piece cannot move down.\n        //merge piece into matrix and start a new piece.\n        if(newPosition.isOnSamePosition(_currentPiece)){\n            mergePieceIntoMatrix(newPosition);\n            sendNextPiece();\n        } else {\n            _currentPiece = newPosition;\n        }\n        const numberOfClearedRows = clearRows();\n        totalNumberOfClearedRows+=numberOfClearedRows;\n        increaseLevel();\n        _score = calculateScore(_score, numberOfClearedRows, _level);\n        _visibleMatrix = createVisibleMatrix(matrix);\n    };\n\n    const calculateScore = (_score, numberOfClearedRows, _level) => {\n        return _score + Math.pow(numberOfClearedRows, 2) * _level\n    }\n\n    const createVisibleMatrix = (matrix) => {\n        const visibleMatrix = matrix.map(row => row.slice());\n        if(_currentPiece != null){\n            _currentPiece.matrixCoordinates().forEach(coordinate => {\n                const tetromino = Tetromino(TetrominoStates.FILLED, _currentPiece.color);\n                visibleMatrix[coordinate.y][coordinate.x] = tetromino;\n            })\n        }\n        return visibleMatrix;\n    };\n\n    const overlaps = (piece) => {\n        const overlap = piece.matrixCoordinates().some(coordinate => {\n            return matrix[coordinate.y][coordinate.x].isFilled()\n        });\n\n        return overlap;\n    };\n\n    const setGameOver = () => {\n      started = false;\n      paused = false;\n      gameOver = true;\n    };\n\n    const mergePieceIntoMatrix = (piece) => {\n        piece.matrixCoordinates().forEach( coordinate => {\n            matrix[coordinate.y][coordinate.x] = Tetromino(TetrominoStates.FILLED, piece.color)\n        });\n    };\n\n    const rotateCurrentPiece = () => {\n        move(() => _currentPiece.rotate({width: _width}));\n    }\n\n    const moveLeft = () => {\n        move(() => _currentPiece.moveLeft());\n    }\n\n    const moveRight = () => {\n        move(() => _currentPiece.moveRight({width: _width}));\n    }\n\n    const move = (action) => {\n        if(_currentPiece == null){\n            return;\n        }\n        let nextPosition = action();\n        if(nextPosition != null && !overlaps(nextPosition)){\n            _currentPiece = nextPosition;\n            _visibleMatrix = createVisibleMatrix(matrix);\n        }\n    }\n\n    const clearRows = () => {\n        let numberOfClearedRows = 0;\n        for(let i = height - 1; i >= 0 ; ){\n            const allEmpty = matrix[i].every(cell => cell.isEmpty());\n            if(allEmpty){\n                break;\n            }\n\n            const allFilled = matrix[i].every(cell => cell.isFilled());\n            if(allFilled){\n                matrix.splice(i, 1);\n                const emtyRow = [];\n                for(let j = 0; j < width; j++){\n                    emtyRow.push(Tetromino());\n                }\n                matrix.unshift(emtyRow);\n                numberOfClearedRows++;\n            } else {\n                i--;\n            }\n        }\n        return numberOfClearedRows;\n    };\n\n    const visibleMatrix = () => {\n      return _visibleMatrix;\n    }\n\n    const score = () => {\n        return _score;\n    };\n\n    const level = () => {\n        return _level;\n    };\n\n    const nextPiece = () => {\n        return _nextPiece;\n    };\n\n    const onLevelChange = (action) => {\n        onLevelChangeAction = action;\n    };\n\n    const notifyLevelChangeListener = (level) => {\n        if(onLevelChangeAction){\n            onLevelChangeAction(level);\n        }\n    };\n\n    return {\n        isRunning,\n        isStarted,\n        isPaused,\n        start,\n        pause,\n        resume,\n        level,\n        score,\n        isFilled,\n        isGameOver,\n        moveCurrentPieceDown,\n        visibleMatrix,\n        rotateCurrentPiece,\n        moveLeft,\n        moveRight,\n        nextPiece,\n        onLevelChange\n    };\n};\n\nexport {createState};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\nimport {createTetris} from \"./tetris/Tetris\";\n\nconst tetris = createTetris();\ntetris.start();\ndocument.addEventListener(\"keydown\", (event) => {\n    const keyName = event.key;\n    if (tetris.isRunning()) {\n        if (keyName === \"ArrowUp\") {\n            tetris.rotateCurrentPiece();\n        } else if (keyName === \"ArrowDown\") {\n            tetris.tick();\n        }\n        else if (keyName === \"ArrowLeft\") {\n            tetris.moveLeft();\n        } else if (keyName === \"ArrowRight\") {\n            tetris.moveRight();\n        } else if (keyName === \" \") {\n            tetris.pause();\n        }\n    } else {\n        if(keyName === \" \") {\n            if (tetris.isPaused()) {\n                tetris.resume();\n            } else {\n                tetris.start();\n            }\n        }\n    }\n});\nReactDOM.render(\n    <React.StrictMode>\n        <Game tetris={tetris}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","import {createState} from \"./State.js\";\n\n\nconst createTetris = ({height, width} = {height: 20, width:10}) => {\n    const _height = height;\n    const _width = width;\n    const state = createState(_height, _width);\n    let timer = null;\n    const stateChangeListeners = [];\n\n    state.onLevelChange((level) => startTimer(timer, calculateSpeedForCurrentLevel(level)))\n\n    const startTimer = (timer, delay) => {\n        if (timer != null) {\n            clearInterval(timer);\n        }\n\n        const newTimer = setInterval(tick, delay)\n        return newTimer;\n    };\n\n    const stopTimer = (timer) => {\n        if (timer != null) {\n            clearInterval(timer);\n        }\n    };\n\n    const calculateSpeedForCurrentLevel = (level) => {\n        return Math.floor(900 * (Math.pow(0.9, level - 1)));\n    };\n\n\n    //eslint-disable-next-line no-unused-vars\n    const toString = () => {\n        let str = state.visibleMatrix().map(row => {\n            return row.map(tetromino => {\n                if (tetromino.isFilled()) {\n                    return tetromino.color;\n                } else {\n                    return tetromino.state;\n                }\n            }).join(\",\");\n        }).join(\"\\n\");\n\n        return str;\n    };\n\n    const tick = () => {\n        if (!state.isRunning()) {\n            return;\n        }\n\n        state.moveCurrentPieceDown();\n        if(state.isGameOver()){\n            stopTimer(timer);\n        }\n        notifyOnStateChangeListeners();\n    };\n\n    const notifyOnStateChangeListeners = () => {\n        stateChangeListeners.forEach(fn => fn({...state}));\n    };\n\n    const resume = () => {\n        state.resume();\n        notifyOnStateChangeListeners();\n        timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n\n    };\n\n    const start = () => {\n        if (state.isStarted()) {\n            return;\n        }\n        state.start();\n        notifyOnStateChangeListeners();\n        timer = startTimer(timer, calculateSpeedForCurrentLevel(state.level()));\n    };\n\n    const pause = () => {\n        if (state.isPaused()) {\n            return;\n        }\n        if (timer != null) {\n            clearInterval(timer);\n        }\n        state.pause();\n        stopTimer(timer);\n        notifyOnStateChangeListeners();\n    };\n\n    const isPaused = () => {\n        return state.isPaused();\n    }\n\n    const moveLeft = () => {\n        state.moveLeft();\n        notifyOnStateChangeListeners();\n    };\n\n    const moveRight = () => {\n        state.moveRight();\n        notifyOnStateChangeListeners();\n    }\n\n    const rotateCurrentPiece = () => {\n        state.rotateCurrentPiece();\n        notifyOnStateChangeListeners();\n    }\n\n\n\n    return {\n        onStateChange(fn) {\n            stateChangeListeners.push(fn);\n        },\n    \n        isGameOver()  {\n            return state.gameOver;\n        },\n    \n        isRunning() {\n            return state.isRunning();\n        },\n    \n        isStarted() {\n            return state.isStarted();\n        },\n        state,\n        rotateCurrentPiece,\n        moveLeft,\n        moveRight,\n        start,\n        pause,\n        isPaused,\n        resume,\n        tick,\n        height: _height,\n        width: _width\n    };\n\n};\n\nexport {createTetris}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tetromino\":\"Cell_tetromino__VpulX\",\"empty\":\"Cell_empty__1v9KP\",\"red\":\"Cell_red__2T5b9\",\"green\":\"Cell_green__1LJp3\",\"blue\":\"Cell_blue__388TG\",\"yellow\":\"Cell_yellow__3jpWg\"};"],"sourceRoot":""}